---
# Provision instances in AWS specific to the LAMP HA Proxy demo
- name: Provision instances in AWS
  hosts: localhost
  connection: local
  gather_facts: False
  vars_files:
  - group_vars/aws/vars.yml 

  tasks:

  - name: Create webserver Security Groups 
    ec2_group: 
     name: "{{ ec2_webserver_security_group }}" 
     description: SG for Webservers 
     vpc_id: vpc-06719f62 
     region: us-east-1
     rules:
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 443
        to_port: 443 
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
     rules_egress:
      - proto: tcp
        from_port: 0  
        to_port: 0  
        cidr_ip: 0.0.0.0/0

  - name: Create database Security Groups
    ec2_group:
     name: "{{ ec2_database_security_group }}" 
     description: SG for Database 
     vpc_id: vpc-06719f62
     region: us-east-1
     rules:
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 443
        to_port: 443
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
     rules_egress:
      - proto: tcp
        from_port: 0
        to_port: 0
        cidr_ip: 0.0.0.0/0

  - name: Create Load Balancers Security Groups
    ec2_group:
     name: "{{ ec2_loadbalancer_security_group }}" 
     description: SG for Load Balancers 
     vpc_id: vpc-06719f62
     region: us-east-1
     rules:
     - proto: tcp
       from_port: 80
       to_port: 80
       cidr_ip: 0.0.0.0/0
     - proto: tcp
       from_port: 443
       to_port: 443
       cidr_ip: 0.0.0.0/0
     - proto: tcp
       from_port: 22
       to_port: 22
       cidr_ip: 0.0.0.0/0
     rules_egress:
     - proto: tcp
       from_port: 0
       to_port: 0
       cidr_ip: 0.0.0.0/0


  - name: Create Monitoring System Security Groups
    ec2_group:
     name: "{{ ec2_monitoring_security_group }}"
     description: SG for Monitoring Systems 
     vpc_id: vpc-06719f62
     region: us-east-1
     rules:
     - proto: tcp
       from_port: 80
       to_port: 80
       cidr_ip: 0.0.0.0/0
     - proto: tcp
       from_port: 443
       to_port: 443
       cidr_ip: 0.0.0.0/0
     - proto: tcp
       from_port: 22
       to_port: 22
       cidr_ip: 0.0.0.0/0
     rules_egress:
     - proto: tcp
       from_port: 0
       to_port: 0
       cidr_ip: 0.0.0.0/0

  - name: Launch webserver instances
    ec2:
       access_key: "{{ ec2_access_key }}"
       secret_key: "{{ ec2_secret_key }}"
       keypair: "{{ ec2_keypair }}"
       group: "{{ ec2_webserver_security_group }}"
       type: "{{ ec2_instance_type }}"
       image: "{{ ec2_image }}"
       region: "{{ ec2_region }}"
       instance_tags: "{'ansible_group':'webservers', 'type':'{{ ec2_instance_type }}', 'group':'{{ ec2_security_group }}', 'Name':'demo_webserver'}"
       count: "{{ ec2_instance_count }}"
       wait: true
    register: ec2

  - name: Launch database instance
    ec2:
        access_key: "{{ ec2_access_key }}"
        secret_key: "{{ ec2_secret_key }}"
        keypair: "{{ ec2_keypair }}"
        group: "{{ ec2_database_security_group }}"
        type: "{{ ec2_instance_type }}"
        image: "{{ ec2_image }}"
        region: "{{ ec2_region }}"
        instance_tags: "{'ansible_group':'dbservers', 'type':'{{ ec2_instance_type }}', 'group':'{{ ec2_security_group }}', 'Name':'demo_database'}"
        count: "1"
        wait: true
    register: ec2

  - name: Launch load balancing instance
    ec2:
        access_key: "{{ ec2_access_key }}"
        secret_key: "{{ ec2_secret_key }}"
        keypair: "{{ ec2_keypair }}"
        group: "{{ ec2_loadbalancer_security_group }}"
        type: "{{ ec2_instance_type }}"
        image: "{{ ec2_image }}"
        region: "{{ ec2_region }}"
        instance_tags: "{'ansible_group':'lbservers', 'type':'{{ ec2_instance_type }}', 'group':'{{ ec2_security_group }}', 'Name':'demo_loadbalancer'}"
        count: "1"
        wait: true
    register: ec2

  - name: Launch monitoring instance
    ec2:
        access_key: "{{ ec2_access_key }}"
        secret_key: "{{ ec2_secret_key }}"
        keypair: "{{ ec2_keypair }}"
        group: "{{ ec2_monitoring_security_group }}"
        type: "{{ ec2_instance_type }}"
        image: "{{ ec2_image }}"
        region: "{{ ec2_region }}"
        instance_tags: "{'ansible_group':'monitoring', 'type':'{{ ec2_instance_type }}', 'group':'{{ ec2_security_group }}', 'Name':'demo_monitoring'}"
        count: "1"
        wait: true
    register: ec2

  - name: Wait for SSH to come up
    wait_for:
        host: "{{ item.public_dns_name }}"
        port: 22
        delay: 60
        timeout: 320
        state: started
    with_items: "{{ ec2.instances }}"
